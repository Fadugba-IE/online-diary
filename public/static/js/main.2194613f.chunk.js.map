{"version":3,"sources":["Components/history.js","Components/NavBar.jsx","Components/Buttons.jsx","Pages/LandingPage.jsx","Components/NavbarLogin.jsx","firebase/firebaseIndex.js","Components/LoginForm.jsx","Pages/LoginPage.jsx","Components/SignUpForm.jsx","Pages/SignUpPage.jsx","Pages/dashboard.jsx","App.js","serviceWorker.js","index.js"],"names":["history","createBrowserHistory","NavBar","Navbar","bg","variant","Brand","href","alt","src","width","height","className","Button","onClick","push","withRouter","size","LandingPage","Container","fluid","Row","Col","Component","NavbarLogin","firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","LoginForm","firestore","props","handleSubmit","event","a","alert","state","username","signInWithEmailAndPassword","email","password","user","console","error","handleChange","bind","this","setState","target","name","value","onSubmit","onChange","type","placeholder","required","LoginPage","initialState","confirmpassword","usernameError","emailError","passwordError","confirmpasswordError","SignUpForm","validate","test","preventDefault","log","createUserWithEmailAndPassword","noValidate","SignUpPage","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.2194613f.chunk.js","sourcesContent":["import { createBrowserHistory } from 'history';\r\n\r\nconst history = createBrowserHistory();\r\n\r\n\r\nexport default history;","import React  from 'react';\r\nimport {Navbar, Button} from 'react-bootstrap';\r\nimport '../App.css';\r\nimport history from './history';\r\n\r\n function NavBar() {\r\n    return (\r\n      <div>\r\n<Navbar bg=\"dark\" variant=\"dark\">\r\n    <Navbar.Brand href=\" \">\r\n    <img\r\n        alt=\"\"\r\n        src=\"/logo.svg\"\r\n        width=\"30\"\r\n        height=\"30\"\r\n        className=\"d-inline-block align-top\"\r\n      />{' '}\r\n      Online Diary APP \r\n      <Button className= 'header-login' variant=\"primary\" onClick = {() => history.push(\"/login\")}>LOG IN</Button> \r\n    </Navbar.Brand>\r\n  </Navbar>\r\n</div>\r\n  )  \r\n}\r\n\r\nexport default NavBar;\r\n\r\n\r\n \r\n     /* <Layout fixedHeader>\r\n          <Header className= 'header-style' title= {<span><strong>My Online Diary App</strong></span>}>\r\n\r\n          \r\n          </Header>\r\n\r\n          <Drawer className='drawer-style'>\r\n            <Navigation>\r\n\r\n            </Navigation>\r\n             \r\n            </Drawer>\r\n         \r\n          <Content />\r\n      </Layout>\r\n      */","import React from 'react';\r\nimport {Button} from 'react-bootstrap';\r\nimport '../App.css';\r\nimport history from './history';\r\nimport {withRouter} from 'react-router-dom';\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n function Buttons() {\r\n     \r\n    \r\n        return (\r\n               \r\n            <div className=\"Landing-buttons\">\r\n            <Button className='button' variant= \"Primary\" size=\"lg\" onClick = {()=> history.push( \"/login\")}>LOG IN</Button> \r\n            <Button className='button' variant=\"Primary\" size=\"lg\" onClick = {() => history.push(\"/signup\")} >SIGN UP</Button>\r\n            </div>\r\n        ) \r\n    }\r\n\r\n\r\n\r\nexport default withRouter(Buttons);\r\n","import React, { Component } from 'react'\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport NavBar from '../Components/NavBar';\r\nimport '../App.css';\r\nimport Buttons from '../Components/Buttons';\r\nimport {withRouter} from 'react-router-dom';\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass LandingPage extends Component {\r\n    render() {\r\n        return (\r\n            <div className='Landing-page'>\r\n                <NavBar/>\r\n                <Container fluid>\r\n                    <Row>\r\n                        <Col>\r\n                      <div className = 'banner-text'>\r\n                          <h1> The Online Diary App</h1>\r\n                     <p> Preserve your memories for the future Using the Online Diary App. </p>\r\n                      </div>\r\n\r\n         <div>\r\n             <Buttons />\r\n            </div>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(LandingPage);\r\n\r\n\r\n//  <Buttons />","import React  from 'react';\r\nimport {Navbar} from 'react-bootstrap';\r\nimport '../App.css';\r\n\r\n\r\n function NavbarLogin() {\r\n    return (\r\n      <div className = \"NavbarLogin\" >\r\n<Navbar bg=\"dark\" variant=\"dark\">\r\n    <Navbar.Brand href=\"/\">\r\n      Online Diary APP \r\n    </Navbar.Brand>\r\n  </Navbar>\r\n</div>\r\n  )  \r\n}\r\n\r\nexport default NavbarLogin;\r\n\r\n\r\n\r\n\r\n \r\n     /* \r\n     import history from '../Components/history';\r\n     <Button className= 'header-login' variant=\"primary\" onClick = {() => history.push('/signup')}>Sign Up</Button> \r\n     \r\n     <Layout fixedHeader>\r\n          <Header className= 'header-style' title= {<span><strong>My Online Diary App</strong></span>}>\r\n\r\n          \r\n          </Header>\r\n\r\n          <Drawer className='drawer-style'>\r\n            <Navigation>\r\n\r\n            </Navigation>\r\n             \r\n            </Drawer>\r\n         \r\n          <Content />\r\n      </Layout>\r\n      */","import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\n\r\n\r\n\r\nconst Config = {\r\n    apiKey: process.env.REACT_APP_API_KEY,\r\n    authDomain: process.env.REACT_APP_AUTHDOMAIN,\r\n    databaseURL: process.env.REACT_APP_DATABASEURL,\r\n    projectId: process.env.REACT_APP_PROJECT_ID,\r\n    storageBucket: process.env.REACT_APP_STORAGEBUCKET,\r\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\r\n    appId: process.env.REACT_APP_APP_ID,\r\n    measurementId: process.env.REACT_APP_MEASUREMENT_ID\r\n};\r\n\r\nfirebase.initializeApp(Config);\r\n\r\n\r\n\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\n\r\nexport default firebase;","import React, { Component } from 'react';\r\nimport '../App.css';\r\nimport {Button} from 'react-bootstrap';\r\nimport history from './history';\r\nimport {auth} from '../firebase/firebaseIndex';\r\n\r\n\r\n class LoginForm extends Component {\r\n        constructor(props){\r\n            super(props);\r\n\r\n            this.state = {\r\n                email : '',\r\n                password :  '',\r\n                error: null\r\n            }\r\n\r\n            this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n\r\n        };\r\n\r\n        \r\n        \r\n\r\n        handleChange(event){\r\n            this.setState ({[event.target.name]  : event.target.value });\r\n            \r\n        }\r\n\r\n        handleSubmit = async event => {\r\n            alert('you have logged in successfully' + this.state.username);\r\n            \r\n\r\n            try {\r\n                const { user } = await auth.signInWithEmailAndPassword(event, this.state.email, this.state.password);\r\n            }\r\n  \r\n            catch(error){\r\n                console.error(error);\r\n            }\r\n              \r\n\r\n\r\n\r\n            \r\n        }\r\n\r\n\r\n    render() {\r\n        return (\r\n              \r\n                <div className = 'Login-form'>\r\n\r\n                <h2>LOG IN</h2>\r\n\r\n                <form  onSubmit = {this.handleSubmit}>\r\n\r\n\r\n                \r\n\r\n                <input onChange = {this.handleChange}\r\n               \r\n                name = \"email\"\r\n                 type = \"email\" \r\n                 placeholder = \"Email\"\r\n                 value = {this.state.email} required />\r\n\r\n                \r\n               \r\n\r\n\r\n                <input onChange= {this.handleChange}\r\n                \r\n                name = \"password\"\r\n                 type = \"password\"\r\n                 placeholder = \"Password\"\r\n                  value = {this.state.password} required />\r\n\r\n\r\n                \r\n                <input type = \"submit\" value = \"Login\" />\r\n                </form>\r\n\r\n                <p> Do not have an account? <Button className='button-form' variant=\"Primary\" size=\"lg\" onClick = {() => history.push('/signup')}>SIGN UP</Button> </p>\r\n                </div>\r\n\r\n\r\n              \r\n         \r\n        )\r\n    }\r\n}\r\n\r\nexport default LoginForm;\r\n\r\n","import React, {Component} from 'react';\r\nimport NavbarLogin from '../Components/NavbarLogin';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport '../App.css';\r\nimport LoginForm from '../Components/LoginForm';\r\nimport {withRouter} from 'react-router-dom';\r\n\r\nclass LoginPage extends Component {\r\n    render(){\r\n\r\n    return (\r\n        <div className = 'form-page' >\r\n                <NavbarLogin />\r\n\r\n                <Container fluid>\r\n                    <Row>\r\n                        \r\n                        <Col>\r\n\r\n                  <div>\r\n                <LoginForm />\r\n                \r\n                  </div>\r\n\r\n\r\n\r\n                        \r\n                \r\n                </Col>\r\n                    </Row>\r\n                </Container>\r\n            \r\n        </div>\r\n    )\r\n\r\n    }\r\n}\r\n\r\nexport default withRouter (LoginPage);\r\n","import React, { Component } from 'react';\r\nimport '../App.css';\r\nimport {auth} from '../firebase/firebaseIndex';\r\n\r\n\r\n\r\nconst initialState = {\r\n                username : \"\",\r\n                email : '',\r\n                password :  '',\r\n                confirmpassword: '',\r\n                usernameError: '',\r\n                emailError: '',\r\n                passwordError: '',\r\n                confirmpasswordError: '',\r\n                error: null,\r\n                \r\n\r\n};\r\n\r\n\r\n\r\n\r\n class SignUpForm extends Component {\r\n        constructor(props){\r\n            super(props);\r\n\r\n            this.state = initialState;\r\n                \r\n\r\n            \r\n\r\n            this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n\r\n        };\r\n\r\n        \r\n        \r\n\r\n        handleChange(event){\r\n            this.setState ({[event.target.name]  : event.target.value });\r\n            \r\n        }\r\n\r\n        validate = () =>{\r\n\r\n           let usernameError =  '';\r\n           let emailError = '';\r\n           let passwordError = '';\r\n            let confirmpasswordError = '';\r\n\r\n\r\n            // username validation\r\n            \r\n            if(!this.state.username){\r\n                usernameError= \"name cannot be blank\";\r\n            }\r\n            \r\n\r\n            // email validation\r\n\r\n            if ( !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(this.state.email)){\r\n                emailError = \"Please enter a valid email address\";\r\n            }\r\n\r\n            // password validation \r\n\r\n            if( !/^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{6,20}$/.test(this.state.password)){\r\n                passwordError = \"password should contain at least one Uppercase, lowercase letter and one special character\"\r\n            }\r\n\r\n             // confirmpassword validation\r\n\r\n             if (this.state.password !== this.state.confirmpassword){\r\n                 confirmpasswordError = \"password does not match\"\r\n             }\r\n            \r\n               // General validation\r\n            if (emailError || usernameError || passwordError || confirmpasswordError){\r\n                this.setState({ emailError, usernameError, passwordError, confirmpasswordError})\r\n                return false;\r\n            }\r\n            return true;\r\n\r\n  \r\n\r\n        };\r\n\r\n\r\n        handleSubmit = async event => {\r\n            \r\n            event.preventDefault();\r\n            const isValid = this.validate();\r\n            if(isValid){\r\n                console.log(this.state);\r\n                alert('Registration Successful');\r\n                \r\n          }\r\n\r\n          try {\r\n              const { user } = await auth.createUserWithEmailAndPassword(event, this.state.email, this.state.password);\r\n                this.setState (initialState);\r\n          }\r\n\r\n          catch(error){\r\n              console.error(error);\r\n          }\r\n            \r\n            };\r\n\r\n            \r\n\r\n    render() {\r\n        return (\r\n              \r\n                <div className = 'SignUp-form'>\r\n\r\n                <h2>SIGN UP</h2>\r\n\r\n                <form  onSubmit = {this.handleSubmit} noValidate>\r\n\r\n\r\n                    <label>Username</label>\r\n                <input onChange = {this.handleChange}\r\n               \r\n               name = \"username\"\r\n               \r\n                value = {this.state.username} />\r\n                <div className = \"Error-message\">{this.state.usernameError}</div> \r\n\r\n                \r\n                    <label>Email Address</label>\r\n                <input onChange = {this.handleChange}\r\n               \r\n                name = \"email\"\r\n                 value = {this.state.email} />\r\n                 <div className = \"Error-message\">{this.state.emailError}</div> \r\n            \r\n               \r\n                \r\n               \r\n                    <label>Password</label>\r\n\r\n                <input onChange= {this.handleChange}\r\n                \r\n                name = \"password\"\r\n                 type = \"password\"\r\n                  value = {this.state.password} />\r\n                <div className = \"Error-message\">{this.state.passwordError}</div> \r\n\r\n\r\n                  <label>Confirm Password</label>\r\n\r\n                <input onChange = {this.handleChange}\r\n               \r\n               name = \"confirmpassword\"\r\n                type = \"password\" \r\n                value = {this.state.confirmpassword} />\r\n                <div className = \"Error-message\">{this.state.confirmpasswordError}</div> \r\n\r\n\r\n                \r\n                <input type = \"submit\" value = \"Sign Up\" />\r\n\r\n                </form>\r\n\r\n               \r\n              \r\n                </div>\r\n\r\n\r\n              \r\n         \r\n        )\r\n    }\r\n}\r\n\r\nexport default SignUpForm;\r\n\r\n","import React, {Component}from 'react';\r\nimport NavbarLogin from '../Components/NavbarLogin';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport '../App.css';\r\nimport SignUpForm from '../Components/SignUpForm';\r\n\r\nclass SignUpPage extends Component {\r\n    render(){\r\n\r\n    \r\n    return (\r\n        <div className = 'form-page' >\r\n                <NavbarLogin />\r\n\r\n                <Container fluid>\r\n                    <Row>\r\n                        \r\n                        <Col>\r\n\r\n                  <div>\r\n                <SignUpForm />\r\n                \r\n                  </div>\r\n\r\n\r\n\r\n                        \r\n                \r\n                </Col>\r\n                    </Row>\r\n                </Container>\r\n            \r\n        </div>\r\n    )\r\n\r\n}\r\n}\r\n\r\nexport default SignUpPage;\r\n\r\n","import React, { Component } from 'react';\r\n\r\n\r\nexport class dashboard extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                Dashboard\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default dashboard;\r\n","import React from 'react';\nimport {Switch, Route} from 'react-router-dom';\n\n\n\nimport LandingPage from './Pages/LandingPage';\nimport LoginPage from './Pages/LoginPage';\nimport SignUpPage from './Pages/SignUpPage';\nimport dashboard from './Pages/dashboard';\n\n//import history from './Components/history';\n\n//import Routes from './Components/Routes';\n\n\n\n\n\n\n\nfunction App () {\n    const user = null;\n        return( \n            user ? \n            <Route path = \"/dashboard\" component = {dashboard} />\n            :\n\n\n             <Switch>\n             <Route exact path=\"/\"  component = {LandingPage} />\n             <Route   path= \"/login\" component = {LoginPage}  />\n             <Route   path=\"/signup\"  component = {SignUpPage} />\n             </Switch>\n            \n        );\n    }\n      \n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Router} from 'react-router-dom';\nimport history from './Components/history';\n\n\n\n\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\n\n\nReactDOM.render(\n  \n <Router  history= {history}>\n     <App /> \n    \n     </Router>\n     \n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}